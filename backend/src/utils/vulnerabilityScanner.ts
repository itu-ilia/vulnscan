import { ScanResults, Vulnerability, ScanMethod } from '../types/scan';

const mockVulnerabilities: Record<number, Vulnerability[]> = {
  21: [
    {
      id: 'CVE-2020-9273',
      severity: 'high',
      title: 'vsftpd 3.0.3 Buffer Overflow',
      description: 'Buffer overflow vulnerability in vsftpd 3.0.3 allows remote attackers to execute arbitrary code.',
      recommendation: 'Upgrade to vsftpd 3.0.4 or later',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2020-9273'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'High',
        integrity: 'High',
        availability: 'High'
      },
      bestPractices: [
        'Disable anonymous FTP access',
        'Use SFTP instead of FTP when possible',
        'Implement strong password policies',
        'Regularly update vsftpd to the latest version'
      ]
    }
  ],
  22: [
    {
      id: 'CVE-2020-14145',
      severity: 'medium',
      title: 'OpenSSH Client Information Disclosure',
      description: 'The client side in OpenSSH before 8.4 allows remote servers to trigger a relatively low-impact information disclosure.',
      recommendation: 'Upgrade to OpenSSH 8.4 or later',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2020-14145'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'Medium',
        integrity: 'Low',
        availability: 'None'
      },
      bestPractices: [
        'Use key-based authentication instead of passwords',
        'Disable root SSH login',
        'Use strong SSH protocol version 2',
        'Implement fail2ban to prevent brute force attacks'
      ]
    }
  ],
  80: [
    {
      id: 'CVE-2021-23017',
      severity: 'high',
      title: 'Nginx HTTP Request Smuggling',
      description: 'A vulnerability in nginx 1.18.0 allows attackers to bypass security controls via HTTP request smuggling.',
      recommendation: 'Upgrade to nginx 1.20.0 or later',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2021-23017'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'High',
        integrity: 'High',
        availability: 'Medium'
      },
      bestPractices: [
        'Use HTTPS instead of HTTP',
        'Implement proper request size limits',
        'Configure security headers',
        'Regular security audits of nginx configuration'
      ]
    }
  ],
  3306: [
    {
      id: 'CVE-2021-2154',
      severity: 'critical',
      title: 'MySQL Remote Code Execution',
      description: 'A critical vulnerability in MySQL 5.7.32 allows remote attackers to execute arbitrary code.',
      recommendation: 'Upgrade to MySQL 5.7.34 or later',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2021-2154'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'Critical',
        integrity: 'Critical',
        availability: 'Critical'
      },
      bestPractices: [
        'Restrict remote access to MySQL server',
        'Use strong authentication methods',
        'Regularly update MySQL to the latest version',
        'Implement network segmentation'
      ]
    }
  ],
  27017: [
    {
      id: 'CVE-2021-20329',
      severity: 'high',
      title: 'MongoDB Privilege Escalation',
      description: 'A vulnerability in MongoDB 4.4.1 allows attackers to escalate privileges.',
      recommendation: 'Upgrade to MongoDB 4.4.4 or later',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2021-20329'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'High',
        integrity: 'High',
        availability: 'Medium'
      },
      bestPractices: [
        'Enable authentication',
        'Use role-based access control',
        'Encrypt data at rest',
        'Regular security audits'
      ]
    }
  ]
};

export async function mockFindVulnerabilities(target: string, method: string): Promise<ScanResults> {
  // Simulate analysis delay based on method
  const delay = method === 'slow' ? 5000 : method === 'normal' ? 2000 : 1000;
  await new Promise(resolve => setTimeout(resolve, delay));

  // Mock scan results
  const results: ScanResults = {
    id: '123e4567-e89b-12d3-a456-426614174000',
    target: target,
    method: method as ScanMethod,
    status: 'completed',
    startTime: new Date(Date.now() - 1000 * 60),
    endTime: new Date(),
    error: undefined,
    openPorts: [
      {
        number: 80,
        protocol: 'tcp',
        service: 'http',
        version: 'nginx 1.18.0',
        state: 'open',
        vulnerabilities: mockVulnerabilities[80] || []
      },
      {
        number: 443,
        protocol: 'tcp',
        service: 'https',
        version: 'nginx 1.18.0',
        state: 'open',
        vulnerabilities: []
      },
      {
        number: 3306,
        protocol: 'tcp',
        service: 'mysql',
        version: '5.7.32',
        state: 'open',
        vulnerabilities: mockVulnerabilities[3306] || []
      }
    ],
    totalPorts: 1000,
    scanDuration: method === 'slow' ? 30 : method === 'normal' ? 15 : 10,
    statistics: {
      totalIssues: 3,
      criticalIssues: 1,
      highRiskIssues: 1,
      mediumRiskIssues: 1,
      lowRiskIssues: 0,
      severityDistribution: {
        critical: 1,
        high: 1,
        medium: 1,
        low: 0
      },
      protocolDistribution: { tcp: 3 },
      serviceDistribution: { http: 1, https: 1, mysql: 1 },
      portStateDistribution: { open: 3, closed: 997, filtered: 0 },
      stateDistribution: { open: 3, closed: 997, filtered: 0 }
    },
    steps: [
      { name: 'Initialize', status: 'completed', progress: 100, startTime: new Date(Date.now() - 1000 * 60), endTime: new Date(Date.now() - 1000 * 50) },
      { name: 'Port Discovery', status: 'completed', progress: 100, startTime: new Date(Date.now() - 1000 * 50), endTime: new Date(Date.now() - 1000 * 40) },
      { name: 'Service Detection', status: 'completed', progress: 100, startTime: new Date(Date.now() - 1000 * 40), endTime: new Date(Date.now() - 1000 * 30) },
      { name: 'Vulnerability Analysis', status: 'completed', progress: 100, startTime: new Date(Date.now() - 1000 * 30), endTime: new Date(Date.now() - 1000 * 10) },
      { name: 'Report Generation', status: 'completed', progress: 100, startTime: new Date(Date.now() - 1000 * 10), endTime: new Date() }
    ],
    logs: [
      { timestamp: new Date(Date.now() - 1000 * 60), type: 'info', message: 'Scan initialized', node: 'scanner', action: 'initialize' },
      { timestamp: new Date(Date.now() - 1000 * 50), type: 'info', message: 'Port discovery completed', node: 'scanner', action: 'port_discovery' },
      { timestamp: new Date(Date.now() - 1000 * 40), type: 'info', message: 'Service detection completed', node: 'scanner', action: 'service_detection' },
      { timestamp: new Date(Date.now() - 1000 * 30), type: 'info', message: 'Vulnerability analysis started', node: 'scanner', action: 'vulnerability_analysis' },
      { timestamp: new Date(Date.now() - 1000 * 10), type: 'info', message: 'Report generation completed', node: 'scanner', action: 'report_generation' }
    ],
    summary: {
      totalVulnerabilities: 3,
      criticalVulnerabilities: 1,
      highRiskVulnerabilities: 1,
      mediumRiskVulnerabilities: 1,
      lowRiskVulnerabilities: 0,
      openPorts: 3,
      closedPorts: 997,
      filteredPorts: 0,
      uniqueServices: 3,
      protocols: ['tcp'],
      topVulnerableServices: [
        { service: 'http', vulnerabilityCount: 1, highestSeverity: 'high' },
        { service: 'mysql', vulnerabilityCount: 1, highestSeverity: 'critical' }
      ]
    },
    configuration: {
      scannerVersion: '1.0.0',
      scannerType: 'VulnScan',
      customCommands: []
    }
  };

  return results;
} 