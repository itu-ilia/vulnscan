import { v4 as uuidv4 } from 'uuid';
import { ScanMethod, Port, Vulnerability, ImpactLevel } from '../types/scan';

const vulnerabilityDatabase: Record<string, Vulnerability[]> = {
  ftp: [
    {
      id: uuidv4(),
      severity: 'high',
      title: 'FTP Anonymous Access',
      description: 'The FTP server allows anonymous access, potentially exposing sensitive files.',
      recommendation: 'Disable anonymous FTP access and require authenticated users only.',
      references: ['https://owasp.org/www-community/vulnerabilities/Anonymous_FTP'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'High',
        integrity: 'Medium',
        availability: 'Low'
      },
      bestPractices: [
        'Disable anonymous FTP access',
        'Use SFTP instead of FTP',
        'Implement strong password policies'
      ],
      cve: 'CVE-2021-1234',
      cvss: 7.5
    }
  ],
  ssh: [
    {
      id: uuidv4(),
      severity: 'medium',
      title: 'SSH Weak Ciphers',
      description: 'The SSH server is configured to allow weak encryption ciphers.',
      recommendation: 'Configure SSH to use only strong encryption algorithms.',
      references: ['https://nvd.nist.gov/vuln/detail/CVE-2020-14145'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'Medium',
        integrity: 'Medium',
        availability: 'None'
      },
      bestPractices: [
        'Use only strong ciphers',
        'Disable CBC mode ciphers',
        'Enable perfect forward secrecy'
      ],
      cve: 'CVE-2020-14145',
      cvss: 5.9
    }
  ],
  http: [
    {
      id: uuidv4(),
      severity: 'critical',
      title: 'HTTP Directory Traversal',
      description: 'The web server is vulnerable to directory traversal attacks.',
      recommendation: 'Update web server configuration to prevent directory traversal.',
      references: ['https://owasp.org/www-community/attacks/Path_Traversal'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'Critical',
        integrity: 'High',
        availability: 'Medium'
      },
      bestPractices: [
        'Sanitize user input',
        'Use proper file access controls',
        'Implement web application firewall'
      ],
      cve: 'CVE-2021-5678',
      cvss: 9.1
    }
  ],
  mysql: [
    {
      id: uuidv4(),
      severity: 'high',
      title: 'MySQL Weak Password Policy',
      description: 'The MySQL server allows weak passwords, making it vulnerable to brute force attacks.',
      recommendation: 'Implement strong password requirements and account lockout policies.',
      references: ['https://dev.mysql.com/doc/refman/8.0/en/password-management.html'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'High',
        integrity: 'High',
        availability: 'Medium'
      },
      bestPractices: [
        'Enforce strong password policies',
        'Implement account lockout',
        'Use SSL/TLS for connections'
      ],
      cve: 'CVE-2021-9012',
      cvss: 8.2
    }
  ],
  redis: [
    {
      id: uuidv4(),
      severity: 'critical',
      title: 'Redis Unauthorized Access',
      description: 'The Redis server is accessible without authentication.',
      recommendation: 'Enable Redis authentication and use a strong password.',
      references: ['https://redis.io/topics/security'],
      attackVector: 'Network',
      impact: {
        confidentiality: 'Critical',
        integrity: 'Critical',
        availability: 'High'
      },
      bestPractices: [
        'Enable authentication',
        'Use strong passwords',
        'Restrict network access',
        'Enable TLS encryption'
      ],
      cve: 'CVE-2021-7789',
      cvss: 9.8
    }
  ]
};

export async function mockFindVulnerabilities(port: Port, method: ScanMethod): Promise<Vulnerability[]> {
  // Only return vulnerabilities for more thorough scans
  if (method === 'slow') {
    return [];
  }

  // Get vulnerabilities for the service
  const vulnerabilities = vulnerabilityDatabase[port.service] || [];

  // For aggressive scans, return all vulnerabilities
  // For normal scans, return only high and critical vulnerabilities
  if (method === 'normal') {
    return vulnerabilities.filter(v => v.severity === 'high' || v.severity === 'critical');
  }

  return vulnerabilities;
} 